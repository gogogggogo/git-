
## 全局目录下查看git配置信息
    git config --list

    全局配置git用户名（git）

    git config --global user.name gaopeng
    git config --global user.email 1916518349@qq.com

## 对应的开发目录下 git初始化

    git init 初始化所在文件夹，被git管理，每个项目初始化一次，不能嵌套git初始化项目

    删除  .git文件夹就可以取消git对项目的管理

## 工作区， 暂存区 ，历史区 ，远程仓库的相互提交

    git status 查看提交状态

    git add abc.txt 或 . 或 -A 将 abc 或 所有文件提交到暂存区

    git commit -m"提交信息" 将暂存区内容提交到历史区,同时生成版本号

    git log 查看提交日志，其中包含版本号,提交人信息，提交时间以及提交备注信息

    git reflog 查看所有的版本信息，即便操作过回滚版本也可以查看

    git diff  diff后面什么都不写，默认比较工作区与暂存区

    git diff master 比较工作区与历史区

    git diff --cached  比较暂存区与历史区

    git checkout .或abc 用暂存区内容覆盖工作区，可以是某一个文件，也可以是所有

    git reset HEAD .或 abc 暂存区向前回滚一下，注意只有历史区才有版本号

    git reset --hard 版本号号 将工作区，暂存区内容回滚到对应版本内容，并且回滚版本之后的版本信息不再显示

    git reset --hard HEAD^ 历史区向前回滚一个版本，并覆盖工作区内容


    git branch 查看分支

    git branch -a 查看远程和本地的所有分支，远程为红色标记

    git branch dev 创建 dev 分支

    git branch -D dev 删除dev分支

    git push origin --delete dev 本地操作删除远程仓库的dev分支

    git checkout dev 切换到dev分支上

    git merge dev 将dev合并到所在分支上


    如果出现冲突（这里是将dev分支合并到master分支，HEAD代表的就是当前的master分支）

    <<<<<<< HEAD
    master
    =======
    abc
    >>>>>>> dev

推送到gitHub远程仓库

    git remote add name(一般都叫origin) 远程仓库地址
    git remote rm name  移除关联本地仓库与远程仓库的关联
    git remote -v 查看与本地仓库关联的远程仓库都有那些

    git push origin master 将本地的master分支推送到远程仓库 第一次提交本地master分支到远程仓库需要 git push -u origin master
    git pull origin master 将远程仓库的master分支拉下来同步到本地master分支

